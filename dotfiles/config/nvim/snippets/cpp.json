{
  "function": {
    "prefix": "fn",
    "body": [
      "${auto} $1($2) ${noexcept}",
      "{",
      "  $0",
      "}"
    ],
    "description": "Function definition"
  },
  "member function": {
    "prefix": "mfun",
    "body": [
      "${auto} $1::$2($3) ${const} ${noexcept}",
      "{",
      "  $0",
      "}"
    ],
    "description": "Member function definition"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class $1",
      "{",
      "public:",
      "  $1() noexcept;",
      "  $1($1 const& b) noexcept;",
      "  $1($1&& b) noexcept;",
      "  ~$1() noexcept;",
      "",
      "  $1& operator=($1 const& rhs) noexcept;",
      "  $1& operator=($1&& rhs) noexcept;",
      "  $2",
      "private:",
      "  $3",
      "};"
    ]
  },
  "dclass": {
    "prefix": "dclass",
    "body": [
      "class $1",
      "{",
      "public:",
      "  $1() noexcept = default;",
      "  $1($1 const& b) noexcept = default;",
      "  $1($1&& b) noexcept = default;",
      "  ~$1() noexcept = default;",
      "",
      "  $1& operator=($1 const& rhs) noexcept = default;",
      "  $1& operator=($1&& rhs) noexcept = default;",
      "  $2",
      "private:",
      "  $3",
      "};"
    ]
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (${std::size_t} ${i} = ${1:0}; ${i} < ${2:length}; ++${i})",
      "{",
      "  $0",
      "}"
    ],
    "description": "Code snippet for 'for' loop"
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for (auto ${const}${&} ${x} : ${v})",
      "{",
      "  $0",
      "}"
    ],
    "description": "Code snippet for a ranged-based for-loop"
  },
  "forrev": {
    "prefix": "forrev",
    "body": [
      "for (${std::size_t} ${i} = ${1:length}; ${i} > ${2:0}; --${i})",
      "{",
      "  $0",
      "}"
    ],
    "description": "Code snippet for reverse 'for' loop"
  },
  "do": {
    "prefix": "do",
    "body": [
      "do",
      "{",
      "  $1",
      "} while ($2);"
    ],
    "description": "Code snippet for do...while loop"
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ($1)",
      "{",
      "  $2",
      "}"
    ]
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ($1)",
      "{",
      "  $0",
      "}"
    ],
    "description": "Code snippet for if statement"
  },
  "else": {
    "prefix": "else",
    "body": [
      "else",
      "{",
      "  $0",
      "}"
    ],
    "description": "Code snippet for else statement"
  },
  "else if": {
    "prefix": "elif",
    "body": [
      "else if ($1)",
      "{",
      "  $0",
      "}"
    ],
    "description": "Code snippet for else-if statement"
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "enum ${1:my_enum}",
      "{",
      "  $0",
      "};"
    ],
    "description": "Code snippet for enum"
  },
  "enum class": {
    "prefix": "enum class",
    "body": [
      "enum class ${my_class}",
      "{",
      "  $0",
      "};"
    ],
    "description": "Code snippet for enum class"
  },
  "namespace": {
    "prefix": "namespace",
    "body": [
      "namespace ${my_namespace}",
      "{",
      "  $0",
      "}"
    ]
  },
  "#ifdef": {
    "prefix": "#ifdef",
    "body": [
      "#ifdef ${DEBUG}",
      "$0",
      "#endif"
    ],
    "description": "Code snippet for #ifdef"
  },
  "#ifndef": {
    "prefix": "#ifndef",
    "body": ["#ifndef ${1:1}", "$0", "#endif"],
    "description": "Code snippet for #ifndef"
  },
  "#if": {
    "prefix": "#if",
    "body": ["#ifdef ${1:0}", "$0", "#endif"],
    "description": "Code snippet for #if"
  },
  "struct": {
    "prefix": "struct",
    "body": [
      "struct ${my_struct}",
      "{",
      "  $0",
      "};"
    ],
    "description": "Code snippet for struct"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:switch_on})",
      "{",
      "case $2:",
      "$0",
      "default:",
      "  break;",
      "}"
    ],
    "description": "Code snippet for switch statement"
  },
  "try": {
    "prefix": "try",
    "body": [
      "try",
      "{",
      "  $1",
      "}",
      "catch (${2:std::exception const&})",
      "{",
      "  $3",
      "}"
    ],
    "description": "Code snippet for try catch"
  },
  "union": {
    "prefix": "union",
    "body": [
      "union ${my_union}",
      "{",
      "  $0",
      "};"
    ],
    "description": "Code snippet for union"
  },
  "cout": {
    "prefix": "cout",
    "body": ["std::cout << \"${1:/* message */}\" << '\n';"],
    "description": "Code snippet for printing to std::cout, provided the header is set"
  },
  "#inc<": {
    "prefix": "inc",
    "body": ["#include <$1>"],
    "description": "Code snippet for #include"
  },
  "#inc\"": {
    "prefix": "inc2",
    "body": ["#include \"$1\""],
    "description": "Code snippet for #include"
  },
  "#def": {
    "prefix": "def",
    "body": ["#define $1 $2 "],
    "description": "Code snippet for #define"
  },
  "main": {
    "prefix": "main",
    "body": [
      "int main(int argc, const char** argv) {",
      "  $0",
      "  return 0;",
      "}"
    ],
    "description": "Code snippet for 'for' loop"
  },
  "guard": {
    "prefix": "guard",
    "body": [
      "#ifndef ${1}",
      "#define $1",
      "",
      "$0",
      "",
      "#endif /* !$1 */"
    ],
    "description": "Header guard"
  }
}
